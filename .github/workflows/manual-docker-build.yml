name: Manual Docker Build and Publish

on:
  workflow_dispatch:
    inputs:
      app:
        description: 'App to build (leave empty for all apps)'
        required: false
        type: string
      tag:
        description: 'Custom tag for the image'
        required: false
        type: string
        default: 'manual'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        app: ${{ github.event.inputs.app && fromJson(format('["{0}"]', github.event.inputs.app)) || fromJson('["api"]') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Dockerfile exists
        run: |
          if [ ! -f "apps/${{ matrix.app }}/Dockerfile" ]; then
            echo "‚ùå Dockerfile not found for app: ${{ matrix.app }}"
            exit 1
          fi
          echo "‚úÖ Dockerfile found for app: ${{ matrix.app }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}
          tags: |
            type=raw,value=${{ github.event.inputs.tag || 'manual' }}
            type=sha,prefix=${{ github.event.inputs.tag || 'manual' }}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image details
        run: |
          echo "üê≥ Built and pushed image:"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.app }}"
          echo "üè∑Ô∏è  Tags: ${{ steps.meta.outputs.tags }}"
